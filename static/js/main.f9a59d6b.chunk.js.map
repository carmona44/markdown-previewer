{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["myMarked","require","placeholder","renderer","Renderer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","maxEditor","maxPreview","handleMarkdownChange","bind","assertThisInitialized","maximizeEditor","maximizePreview","event","setState","target","value","arrClases","react_default","a","createElement","className","App_Editor","clase","onChange","max","App_Preview","Component","Editor","App_Toolbar","title","icono","id","type","spellCheck","Preview","dangerouslySetInnerHTML","__html","Toolbar","_this2","onclick","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9a59d6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nvar myMarked = require('marked'); //Libreria para poder realizar el renderizado a HTML\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\nconst renderer = new myMarked.Renderer();\n\nclass App extends Component {\n  constructor(props){\n     super(props);\n     this.state = {\n         markdown: placeholder,\n         maxEditor: false,\n         maxPreview: false\n     };\n     this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n     this.maximizeEditor = this.maximizeEditor.bind(this);\n     this.maximizePreview = this.maximizePreview.bind(this);\n  }\n\n  handleMarkdownChange(event){\n      this.setState({\n          markdown: event.target.value\n      });\n  }\n\n  maximizeEditor(){\n    this.setState({\n       maxEditor: !this.state.maxEditor\n    });\n  }\n\n  maximizePreview(){\n    this.setState({\n        maxPreview: !this.state.maxPreview\n    });\n  }\n\n  render() {\n    const arrClases = this.state.maxEditor ? ['maximize', 'hide'] :\n        this.state.maxPreview ? ['hide', 'maximize'] : ['editorClass', 'previewClass'];\n\n    return (\n      <div className=\"App\">\n        <Editor clase={arrClases[0]} markdown={this.state.markdown} onChange={this.handleMarkdownChange} max={this.maximizeEditor}/>\n        <Preview clase={arrClases[1]} markdown={this.state.markdown} max={this.maximizePreview}/>\n      </div>\n    );\n  }\n}\n\nconst Editor = (props) => {\n    return (\n        <div className={props.clase}>\n          <Toolbar title=\"Editor\" icono=\"fas fa-code\" max={props.max}/>\n          <textarea id=\"editor\" type=\"text\" value={props.markdown} onChange={props.onChange} spellCheck=\"false\"/>\n        </div>\n    );\n};\n\nconst Preview = (props) => {\n    return (\n       <div className={props.clase}>\n         <Toolbar title=\"Vista previa\" icono=\"far fa-eye\" max={props.max}/>\n         <div className=\"preview-style\" dangerouslySetInnerHTML={{__html: myMarked(props.markdown, { renderer: renderer })}}></div>\n       </div>\n    );\n};\n\nclass Toolbar extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      title: props.title,\n      icono: props.icono,\n      onclick: props.max\n    }\n  }\n  render(){\n    return (\n        <div className=\"toolbar\">\n          <i className={this.state.icono}/>\n          <span className=\"title\">{this.state.title}</span>\n          <span className=\"max-icon\"><i className=\"fas fa-expand-arrows-alt\" onClick={this.state.onclick}/></span>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}